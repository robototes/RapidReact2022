plugins {
    id "java"
    id "com.diffplug.spotless" version "6.2.1"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "net.ltgt.errorprone"
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = (project.hasProperty('automatedTest') ? Boolean.valueOf(project.getProperty('automatedTest')) : false) ?
        "frc.team2412.robot.AutomatedTestMain" : "frc.team2412.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass("RoboRIO")) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass("FRCJavaArtifact")) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass("FileTreeArtifact")) {
                    files = project.fileTree("src/main/deploy")
                    directory = "/home/lvuser/deploy"
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'
    compileOnly group: "com.google.errorprone", name: "error_prone_annotations", version: "2.10.0"

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    implementation "com.github.robototes.2910Common:common:6b57211"
    implementation "com.github.robototes.2910Common:robot:6b57211"

    implementation "com.github.robototes:swerve-lib:994f2d4"

    implementation "com.github.Oblarg:Oblog:4.0.9"
    testImplementation "junit:junit:4.12"

    errorprone group: "com.google.errorprone", name: "error_prone_core", version: "2.10.0"
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone.disableWarningsInGeneratedCode = true
}

// Simulation configuration (e.g. environment variables).

if (!project.hasProperty('automatedTest') || !Boolean.valueOf(project.getProperty('automatedTest'))) {
    wpi.sim.addGui().defaultEnabled = true
    wpi.sim.addDriverstation()
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ("fat jar")
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Enforce formatting
spotless {
    format "misc", {
        target "*"
        targetExclude "simgui*.json", "**/build/**", "**/build-*/**", "**/bin/**", "/.*"

        endWithNewline()
        indentWithSpaces()
        trimTrailingWhitespace()
    }

    java {
        targetExclude "**/build/**", "**/build-*/**", "**/bin/**", "/.*"
        googleJavaFormat()
        toggleOffOn()
        removeUnusedImports()
        endWithNewline()
        indentWithSpaces()
        trimTrailingWhitespace()
    }

    groovyGradle {
        targetExclude "**/build/**", "**/build-*/**", "**/bin/**", "/.*"
        greclipse().configFile("eclipse-formatter.xml")

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}
